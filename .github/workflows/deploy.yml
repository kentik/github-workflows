name: Deploy to any environment using ktools

on:
  workflow_call:
    inputs:
      service_group:
        required: true
        type: string
      branch:
        required: false
        type: string
        default: ${{ github.ref_name }}
      environment:
        required: false
        type: string
        description: Environment name
        default: our1
      autodeploy_branches:
        required: false
        type: string
        description: A list of branches that should trigger a deployment without the need for a valid commit message pattern
        default: '["master", "main"]'
      skip-maint:
        description: 'Skip maintenance window (period where Pagerduty alarms are ignored).'
        default: 'false'
        required: false
        type: string
      skip-restart:
        description: 'Skip restart step.'
        default: 'false'
        required: false
        type: string
      emergency-deploy:
        description: "Ignores all constraints/restrictions and proceeds with deploy"
        default: 'false'
        required: false
        type: string
      host:
        description: "Deploys only to a comma-separated list of hosts. E.g: c101.our1.kentik.com,c102.our1.kentik.com"
        default: ""
        required: false
        type: string


jobs:
  printJob:    
    name: Print event
    runs-on: ubuntu-latest
    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        AUTODEPLOYABLE: ${{ contains(toJSON(inputs.autodeploy_branches), github.ref_name) }}
        DEPLOY_BRANCHES: ${{ toJSON(inputs.autodeploy_branches) }}
      run: |
        echo "branches: $DEPLOY_BRANCHES"
        echo "auto: $AUTODEPLOYABLE"
        echo "$GITHUB_CONTEXT"

  wait_for_build:
    name: Wait for Build
    runs-on: ubuntu-latest
    if: >-
      (
        contains(github.event.head_commit.message, '#deploy') ||
        contains(toJSON(inputs.autodeploy_branches), github.ref_name)
      ) && 
      ! contains(github.event.head_commit.message, '#nodeploy')
    steps:

      - name: Wait for Build
        uses: bernardovale/action-wait-for-check@allowed-status
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: Jenkins
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          intervalSeconds: 5
          timeoutSeconds: 1800
          allowedStatus: success

  deploy:
    name: Deploy Service
    needs: wait_for_build

    runs-on: ubuntu-latest
    if: >-
      (
        contains(github.event.head_commit.message, '#deploy') ||
        contains(toJSON(inputs.autodeploy_branches), github.ref_name)
      ) && 
      ! contains(github.event.head_commit.message, '#nodeploy')

    # Allow the job to fetch a GitHub ID token
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:

      - name: Configure Credentials
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/70880649570/locations/global/workloadIdentityPools/github-pool/providers/github-provider"
          service_account: "svc-github-ktools-action@kentik-continuous-delivery.iam.gserviceaccount.com"

      - name: Show Current Status
        uses: kentik/github-workflows/ktools/deploy/status@main
        with:
          service_group: ${{ inputs.service_group }}
          environment: ${{ inputs.environment }}
          cleanup: false

      - name: Deploy Service
        uses: kentik/github-workflows/ktools/deploy/push@main
        with:
          service_group: ${{ inputs.service_group }}
          environment: ${{ inputs.environment }}
          branch: ${{ inputs.branch }}
          skip-maint: ${{ inputs.skip-maint }}
          skip-restart: ${{ inputs.skip-restart }}
          emergency-deploy: ${{ inputs.emergency-deploy }}
          host: ${{ inputs.host }}
          cleanup: false

      - name: Show Status
        uses: kentik/github-workflows/ktools/deploy/status@main
        with:
          service_group: ${{ inputs.service_group }}
          environment: ${{ inputs.environment }}
